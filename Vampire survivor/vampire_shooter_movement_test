import pygame
from os.path import join


class Player(pygame.sprite.Sprite):
    def __init__(self, groups):
        super().__init__(groups)
        self.image = pygame.image.load(join('images', 'player', 'down', '0.png')).convert_alpha()
        self.rect = self.image.get_frect(center = (WINDOW_WIDTH /2 , WINDOW_HEIGHT / 2))
        self.direction = pygame.math.Vector2()
        self.speed = 100

    def update(self, dt):
        keys = pygame.key.get_pressed()
        if keys[pygame.K_RIGHT]:
            self.direction.x = 1
            self.direction = self.direction.normalize() if self.direction else self.direction
            self.rect.center += self.direction * self.speed * dt
            Animated_Walk(move_right_frames, self.rect.center, all_sprites)

        if keys[pygame.K_LEFT]:
            self.move_lock = True
            self.direction.x = -1
            self.direction = self.direction.normalize() if self.direction else self.direction
            self.rect.center += self.direction * self.speed * dt
            Animated_Walk(move_left_frames, self.rect.center, all_sprites)
            

        if keys[pygame.K_UP]:
            self.direction.y = -1
            self.direction = self.direction.normalize() if self.direction else self.direction
            self.rect.center += self.direction * self.speed * dt
            Animated_Walk(move_up_frames, self.rect.center, all_sprites)

        if keys[pygame.K_DOWN]:
            self.direction.y = 1
            self.direction = self.direction.normalize() if self.direction else self.direction
            self.rect.center += self.direction * self.speed * dt
            Animated_Walk(move_down_frames, self.rect.center, all_sprites)

class Animated_Walk(pygame.sprite.Sprite):
    def __init__(self, frames, pos, groups):
        super().__init__(groups)
        self.frames = frames
        self.frame_index = 0
        self.image = self.frames[self.frame_index]
        self.rect = self.image.get_frect(center = pos)

    def update(self, dt):
        self.frame_index += 75 * dt
        if self.frame_index < len(self.frames):
            self.image = self.frames[int(self.frame_index)]
        else:
            self.kill()  

#initialization
pygame.init()
WINDOW_WIDTH, WINDOW_HEIGHT = 1280, 720
display_surface = pygame.display.set_mode((WINDOW_WIDTH,WINDOW_HEIGHT))
pygame.display.set_caption("Vampire Shooter")
running = True
clock = pygame.time.Clock()

#imports
move_up_frames = [pygame.image.load(join('images', 'player', 'up', f'{i}.png')).convert_alpha() for i in range (4)]
move_down_frames = [pygame.image.load(join('images', 'player', 'down', f'{i}.png')).convert_alpha() for i in range (4)]
move_left_frames = [pygame.image.load(join('images', 'player', 'left', f'{i}.png')).convert_alpha() for i in range (4)]
move_right_frames = [pygame.image.load(join('images', 'player', 'right', f'{i}.png')).convert_alpha() for i in range (4)]

#sprites
all_sprites = pygame.sprite.Group()
player = Player(all_sprites)

while running:

    dt = clock.tick(60) / 1000

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False

    all_sprites.update(dt)

    display_surface.fill('black')

    all_sprites.draw(display_surface)
      
    pygame.display.update()

pygame.quit()
