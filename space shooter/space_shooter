import pygame
from os.path import join
from random import randint, uniform

class Player(pygame.sprite.Sprite):
    def __init__(self, groups):
        super().__init__(groups)
        self.image = pygame.image.load(join('images', 'player.png')).convert_alpha()
        self.rect = self.image.get_frect(center = (WINDOW_WIDTH /2 , WINDOW_HEIGHT / 2))
        self.direction = pygame.math.Vector2()
        self.speed = 300
        self.can_shoot = True
        self.laser_shoot_time = 0
        self.cooldown_duration = 400
        self.powerup_active = False
        self.powerup_duration = 5000
        self.powerup_start_time = 0    

    def laser_timer(self):
        if not self.can_shoot:
            current_time = pygame.time.get_ticks()
            if current_time - self.laser_shoot_time >= self.cooldown_duration:
                self.can_shoot = True

    def shoot_lasers(self):
        Laser(laser_surface, self.rect.midtop, (all_sprites, laser_sprites), direction=pygame.math.Vector2(0,-1))
        if self.powerup_active:
            print("powerup_active")
            Laser(laser_surface, self.rect.midtop, (all_sprites, laser_sprites), direction=pygame.math.Vector2(-1,-1).normalize())
            Laser(laser_surface, self.rect.midtop, (all_sprites, laser_sprites), direction=pygame.math.Vector2(1,-1).normalize())
                

    def update(self, dt):
        keys = pygame.key.get_pressed()
        self.direction.x = int(keys[pygame.K_RIGHT]) - int(keys[pygame.K_LEFT])
        self.direction.y = int(keys[pygame.K_DOWN]) - int(keys[pygame.K_UP])
        self.direction = self.direction.normalize() if self.direction else self.direction
        self.rect.center += self.direction * self.speed * dt

        recent_keys = pygame.key.get_just_pressed()
        if recent_keys[pygame.K_SPACE] and self.can_shoot:
           self.shoot_lasers()
           self.can_shoot = False
           self.laser_shoot_time = pygame.time.get_ticks()
           laser_sound.play()
        self.laser_timer()

        if self.powerup_active:
            current_time = pygame.time.get_ticks()
            if current_time - self.powerup_start_time >= self.powerup_duration:
                self.powerup_active = False
                print("powerup not active")

class Star(pygame.sprite.Sprite):
    def __init__(self, groups, surf):
        super().__init__(groups)
        self.image = surf
        self.rect = self.image.get_frect(center = (randint(0, WINDOW_WIDTH), randint(0, WINDOW_HEIGHT)))
        
class Laser(pygame.sprite.Sprite):
    def __init__(self, surf, pos, groups, direction):
        super().__init__(groups)
        self.image = surf
        self.rect = self.image.get_frect(midbottom = pos)
        self.direction = direction
        self.speed = 400    

    def update(self, dt):
        self.rect.center += self.speed * self.direction * dt
        if self.rect.bottom < 0:
            self.kill()

class Meteor(pygame.sprite.Sprite):
    def __init__(self, surf, pos, groups):
        super().__init__(groups)
        self.original_image = surf
        self.image = surf
        self.rect = self.image.get_frect(center = pos)
        self.start_time = pygame.time.get_ticks()
        self.lifetime = 3000
        self.direction = pygame.Vector2(uniform(-0.5, 0.5), 1)
        self.speed = randint(400,500)
        self.rotation_speed = randint(40,80)
        self.rotation = 0

    def update(self, dt):
        self.rect.center += self.direction  * self.speed * dt
        if pygame.time.get_ticks() - self.start_time >= self.lifetime:
            self.kill()
        self.rotation += self.rotation_speed * dt
        self.image = pygame.transform.rotozoom(self.original_image, self.rotation, 1)
        self.rect = self.image.get_frect(center = self.rect.center)

class AnimatedExplosions(pygame.sprite.Sprite):
    def __init__(self, frames, pos, groups):
        super().__init__(groups)
        self.frames = frames
        self.frame_index = 0
        self.image = self.frames[self.frame_index]
        self.rect = self.image.get_frect(center = pos)

    def update(self, dt):
        self.frame_index += 20 * dt
        if self.frame_index < len(self.frames):
            self.image = self.frames[int(self.frame_index)]
        else:
            self.kill()  

class Powerup(pygame.sprite.Sprite):
    def __init__(self, surf, pos, groups):
        super().__init__(groups)
        self.original_image = surf
        self.image = surf
        self.rect = self.image.get_frect(center = pos)
        self.rotation_speed = 500
        self.rotation = 0
        self.lifetime = 5000
        self.start_time = pygame.time.get_ticks()

    def update(self, dt):
        if pygame.time.get_ticks() - self.start_time >= self.lifetime:
            self.kill() 
        self.rotation += self.rotation_speed * dt
        self.image = pygame.transform.rotozoom(self.original_image, self.rotation, 1)
        self.rect = self.image.get_frect(center = self.rect.center) 
       
def collisions():
    global running
    meteor_collisions = pygame.sprite.spritecollide(player, meteor_sprites, False, pygame.sprite.collide_mask)
    if meteor_collisions:
        running = False
       
    for laser in laser_sprites:
        laser_collision = pygame.sprite.spritecollide(laser, meteor_sprites, True)
        if laser_collision:
            laser.kill()
            AnimatedExplosions(explosion_frames, laser.rect.midtop, all_sprites)
            explosion_sound.play()

    powerup_collision = pygame.sprite.spritecollide(player, powerup_sprites, False, pygame.sprite.collide_mask)
    if powerup_collision:
        for powerup in powerup_collision:
            powerup.kill()
            player.powerup_active = True
            player.powerup_start_time = pygame.time.get_ticks()

def display_score():
    current_time = pygame.time.get_ticks() // 100
    text_surface = font.render(str(current_time), True, (240, 240, 240))
    text_rec = text_surface.get_frect(midbottom = (WINDOW_WIDTH / 2, WINDOW_HEIGHT - 50))
    display_surface.blit(text_surface, text_rec)
    pygame.draw.rect(display_surface, (240,240,240), text_rec.inflate(20,10).move(0, -8), 5, 10)


#general setup
pygame.init()
WINDOW_WIDTH, WINDOW_HEIGHT = 1280, 720
display_surface = pygame.display.set_mode((WINDOW_WIDTH,WINDOW_HEIGHT))
pygame.display.set_caption("Mike's Super Cool Game That Everyone Likes To Play")
running = True
clock = pygame.time.Clock()

#import
star_surface = pygame.image.load(join('images', 'star.png')).convert_alpha()
meteor_surface = pygame.image.load(join('images', 'meteor.png')).convert_alpha()
laser_surface = pygame.image.load(join('images', 'laser.png')).convert_alpha()
font = pygame.font.Font(join('images', 'Oxanium-Bold.ttf'), 40)
explosion_frames = [pygame.image.load(join('images', 'explosion', f'{i}.png')).convert_alpha() for i in range (21)]
powerup_surface = pygame.image.load(join('images', 'star.png')).convert_alpha()

laser_sound = pygame.mixer.Sound(join('audio', 'laser.wav'))
explosion_sound = pygame.mixer.Sound(join('audio', 'explosion.wav'))
explosion_sound.set_volume(0.5)
game_music = pygame.mixer.Sound(join('audio', 'game_music.wav'))
game_music.set_volume(0.5)
game_music.play(loops = -1)

#sprites
all_sprites = pygame.sprite.Group()
meteor_sprites = pygame.sprite.Group()
laser_sprites = pygame.sprite.Group()
powerup_sprites = pygame.sprite.Group()

for i in range(20):
    Star(all_sprites, star_surface)
player = Player(all_sprites)

#custom events
meteor_event = pygame.event.custom_type()
powerup_event = pygame.event.custom_type()
pygame.time.set_timer(meteor_event, 500)
powerup_count = 0
initial_powerup_interval = 5000
powerup_interval = initial_powerup_interval
pygame.time.set_timer(powerup_event, powerup_interval)

while running:
    # dt is delta time in seconds since last frame, used for framerate-independent physics
    dt = clock.tick() / 1000
    
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == meteor_event:
            x,y = randint(0, WINDOW_WIDTH), randint(-200, -100)
            Meteor(meteor_surface, (x,y), (all_sprites, meteor_sprites))
        if event.type == powerup_event and not player.powerup_active:
            x,y = (randint(0, WINDOW_WIDTH), randint(0, WINDOW_HEIGHT))
            Powerup(powerup_surface, (x,y), (all_sprites, powerup_sprites))
            powerup_count += 1
            powerup_interval = initial_powerup_interval * powerup_count
            pygame.time.set_timer(powerup_event, powerup_interval)
            print("powerup active")
            print(f"Powerup Interval: {powerup_interval}")
 
    all_sprites.update(dt)
    collisions()

    display_surface.fill('#3a2e3f')
    display_score()
    all_sprites.draw(display_surface)
      
    pygame.display.update()

pygame.quit()